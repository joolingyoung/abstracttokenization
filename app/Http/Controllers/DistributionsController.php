<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;

use App\Http\Controllers\Controller;


use \HistoricTableHelper;

use App\Distribution;
use App\Investment;
use App\Property;
use App\User;
use App\Jobs\DelayMail;
use App\Notifications\GeneralDelayNotification;
use Illuminate\Support\Carbon;

class DistributionsController extends Controller
{
    public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('auth.details');
    }

    public function distributions(Request $request, $type, $rand, $id)
    {
        $data = $request->session()->get('distributions');
        $distributions = Distribution::where('property_id', $id)
            ->get();
        return view(
            'investor-servicing.distributions.index',
            ['title' => 'Distributions > Investor Servicing']
        )
            ->with(compact('data', 'type', 'id', 'distributions'));
    }

    public function preview(Request $request, $type, $rand, $id, $distribution_id)
    {
        $data = $request->session()->get('distributions');
        $msg = '';
        return view(
            'investor-servicing.distributions.preview',
            ['title' => 'Preview Distributions > Investor Servicing']
        )
            ->with(compact('msg', 'data', 'type', 'id', 'distribution_id'));
    }

    // Submit Preview Data
    public function submitDistributions(Request $request)
    {

        try {
            $distribution_id = null;
            $history = array();
            $session_data = session('distributions', array());
            $session_data = array_merge($session_data, $_POST);
            session(['distributions' => $session_data]);

            $userid = Auth::id();
            $type   = $request->get('tid');
            $id = $request->get('did');

            $rules = [
                'name'              => 'required',
                'date'              => 'required',
                'period_start_date' => 'required',
                'period_end_date'   => 'required',
                'cashFlowtype'      => 'required',
                'totalAmount'       => 'required'
            ];

            $this->validate($request, $rules);

            // Get the cap table data
            $captable_data = HistoricTableHelper::get_cap_table_data($type, $id, $userid);

            $property = Property::find($id);

            // Historic data file process
            if (!empty($request->session()->get('historicRead'))) {
                $historic_read = json_decode(json_encode($request->session()->get('historicRead')));

                foreach ($historic_read->original->response->rows as $row) {

                    switch (gettype($row[0])) {
                        case 'object':
                            $name = date('d/M', strtotime($row[0]->date));
                            break;
                        case
                        $name = $row[0];
                            break;
                    }

                    $total_amount = $row[3]; // Total Amount
                    $start_date = date('Y-m-d', strtotime($row[2]->date));

                    $filename   = $name . ' (Generated by Abstract Tokenization)' . '.csv';
                    $nPath      = $userid . '/' . $id . '/';
                    $payload = [
                        'userid'            => $userid,
                        'property_id'       => $id,
                        'name'              => $name,
                        'date'              => $start_date,
                        'cash_flow_type'      => '',
                        'total_amount'       => $total_amount,
                        'file'              => $nPath . $filename,
                    ];
                    $distribution = new Distribution($payload);
                    $distribution->save();

                    $distribution->generateHistory(false);
                    $distribution_id = $distribution->id;
                }

                $request->session()->forget('historicRead');
            }

            // Monthly data process
            if (isset($type) && isset($id)) {

                if (!is_null($captable_data)) {
                    $name     = $request->get('name');
                    $filename = $name . ' (Generated by Abstract Tokenization)' . '.csv';
                    $nPath = $userid . '/' . $id . '/';
                    $total_amount = $request->get('totalAmount');
                    $fmt = new \NumberFormatter('en_US', \NumberFormatter::CURRENCY);
                    $currency = 'USD';
                    $total_amount = $fmt->parseCurrency($total_amount, $currency);

                    $property = Property::find($id);
                    $property->property_type = $type;
                    $property->save();

                    $payload = [
                        'userid'            => $userid,
                        'property_id'       => $id,
                        'name'              => $name,
                        'date'              => date('Y-m-d', strtotime($request->get("date"))),
                        'period_start_date' => date('Y-m-d', strtotime($request->get("period_start_date"))),
                        'period_end_date'   => date('Y-m-d', strtotime($request->get("period_end_date"))),
                        'cash_flow_type'    => $request->get('cashFlowtype'),
                        'total_amount'      => $total_amount,
                        'file'              => $nPath . $filename,
                    ];

                    $distribution = New Distribution($payload);
                    $distribution->save();

                    $distribution->generateHistory(true);
                    $distribution_id = $distribution->id;

                    // Mail and Notifiation  Delay to Investors
                    $property_name = $distribution->property->name;
                    // $delay_time = (Carbon::now()->addMinutes(1));    //test_dealy 1 minute
                    $delay_time = (new Carbon($request->get('date')))->addHours(24);
                    $user=User::find($userid);
                    $user->notify(
                        (new GeneralDelayNotification('newDistribution', $property_name))
                            ->delay($delay_time)
                        );
                    dispatch(
                        (new DelayMail('newDistribution', $user->email, $property_name))
                            ->delay($delay_time)
                    );

                    $investments = $property->investments;

                    foreach ($investments as $investment) {
                        if ($investment->userid == $userid) {
                            continue;
                        }
                        $investor_user = $investment->user;

                        $investor_user->notify(
                            (new GeneralDelayNotification('newDistribution', $property_name))
                                ->delay($delay_time)
                        );
                        dispatch(
                            (new DelayMail('newDistribution', $investor_user->email, $property_name))
                            ->delay($delay_time)
                        );

                    }
                    $distributions = $property->distributions;
                }
            }

            // Change to past holdings if it is final distribution
            if(!empty($request->get('final_distribution'))) {
                $property->holding_status = 'past';
                $property->save();
            }

            return view(
                'investor-servicing.distributions.index',
                ['title' => 'Distributions > Investor Servicing', 'success' => true]
            )
                ->with(compact('type', 'distributions', 'id', 'distribution_id'));
        } catch (Exception $e) {
            report($e);
            return false;
        }
    }

    public function download(Request $request)
    {

        $rules = [
            'name' => 'required',
            'date' => 'required',
            'period_start_date' => 'required',
            'period_end_date' => 'required',
            'cashFlowtype' => 'required',
            'totalAmount' => 'required'
        ];

        $this->validate($request, $rules);

        $type = $request->get('tid');
        $id = $request->get('did');
        $name = $request->get('name');
        $distribution_id = $request->get('distribution_id');

        $userid = Auth::id();

        $data = DB::table('distributions')
            ->where('userid', $userid)
            ->where('property_id', $id)
            ->where('name', $name)
            ->select('file')
            ->first();

        if ($data) {
            $adapter = Storage::disk('s3')->getDriver()->getAdapter();
            if (!empty($data->file)) {
                $path = $data->file;
                $command = $adapter->getClient()->getCommand('GetObject', [
                    'Bucket' => $adapter->getBucket(),
                    'Key'    => $adapter->getPathPrefix() . $path
                ]);
                $request = $adapter->getClient()->createPresignedRequest($command, '+20 minute');
                $data = (string) $request->getUri();
                if (isset($data)) {
                    $f = file_get_contents($data);
                    $z = $name . ' (Generated by Abstract Tokenization).csv';
                    $headers = [
                        'Content-Type' => 'text/csv',
                        'Content-Description' => 'File Transfer',
                        'Content-Disposition' => "attachment; filename={$z}",
                        'filename' => $z
                    ];
                    return response($f, 200, $headers);
                } else {
                    $msg = 'Distribution file not found';
                    return view('investor-servicing.distributions.preview', ['title' => 'Preview Distributions > Investor Servicing', 'errors' => true])->with(compact('msg', 'type', 'id', 'distribution_id'));
                }
            }
        } else {
            $msg = 'Distribution does not exist, please check your inputs';
            return view('investor-servicing.distributions.preview', ['title' => 'Preview Distributions > Investor Servicing', 'errors' => true])->with(compact('msg', 'type', 'id', 'distribution_id'));
        }
    }

    public function display($path, $type, $id, $name)
    { }

    public function getCSV(Request $request, $type, $rand, $distribution_id)
    {
        $user_id = Auth::id();
        try {
            $dist = Distribution::find($distribution_id);

            if ($dist->userid == $user_id) {
                $f = $dist->getCSVFile();
                $z = $dist->property->name.'_Distribution_' . $dist->name . '.csv';
                $headers = [
                    'Content-Type' => 'text/csv',
                    'Content-Description' => 'File Transfer',
                    'Content-Disposition' => "attachment; filename={$z}",
                    'filename' => $z
                ];
                return response($f, 200, $headers);
            } else {
                return redirect('/investor-servicing');
            }
        } catch (Exception $e) {
            return false;
        }
    }

    public function getNACHA(Request $request, $type, $distribution_id)
    {
        $user_id = Auth::id();
        $distribution = Distribution::find($distribution_id);
        $history = $distribution->distributionHistories;
        $property_id = $distribution->property_id;
        $property_name = Property::find($property_id)->name;
        $description = $distribution->name;
        $start_date = $distribution->period_start_date;
        $investors = [];
        foreach ($history as $d)
        {
            if($d->user_id == $user_id) {
                continue;
            }
            $investor = Investment::where('property_id', $property_id)
                ->where('userid', $d->user_id)
                ->first();
            if($investor == null)
                continue;
            // TO BE FIXED
            $investor->calc_amount = $d->amount;
            $investors[] = $investor;
        }
        $cap_table = \CapTableHelper::get_nacha_data( $property_id );
        \NachaGeneration::generateFile($cap_table, $investors, $description, $property_name, $start_date);
    }
}
